#include<stdio.h>
#include<inttypes.h>
#include <math.h>

#ifndef _BLOOM_FILTER_H_
#define _BLOOM_FILTER_H_

#define BLOOM_SUCCESS 1
#define BLOOM_FAILURE -1 

typedef uint64_t* (*bloom_hash) (int num_hash, void * value, size_t value_len); 
// array of hash_values generated by the hash functions of num_hash in number . 


typedef struct bloom_filter{
    uint64_t approximate_elements; 
    float false_positivity;
    unsigned int number_of_hashing_func; 
    uint64_t size; 
    unsigned char * bloom_filter_vector;  
    unsigned long bloom_length;
    uint64_t number_of_elements_added;  
    bloom_hash hashing_function;
}bloom_filter;  


int bloom_filter_init(bloom_filter * bloomFilter, uint64_t approximate_elements, float false_positivity, bloom_hash hash_func); 

void bloom_filter_set_hash_function(bloom_filter * bloomFilter, bloom_hash hash_func);  

void stats_bloom_filter(bloom_filter * bloomFilter); 

int free_bloom_filter(bloom_filter * bloomFilter);  

int reset_bloom_filter(bloom_filter * bloomFilter); 

int add_value_bloom_filter(bloom_filter * bloomFilter,  void * value, size_t value_len); 

int is_present_bloom_filter(bloom_filter * bloomFilter, void* value, size_t value_len);  

float get_current_positivity_rate(bloom_filter * bloomFilter);  

uint64_t count_bits_set(bloom_filter * bloomFilter);

uint64_t estimating_elements(bloom_filter * bloomFilter);

uint64_t * bloom_filter_calculate_hashes(bloom_filter * bloomFilter,  void * value, unsigned int num_hashes, size_t value_len); 


// operations on bloom filters 
bloom_filter * union_bloom_filters(bloom_filter * source1, bloom_filter * source2);  

bloom_filter * intersection_bloom_filters(bloom_filter * source1, bloom_filter * source2); 

long double jaccard_index_bloom_filters(bloom_filter * source1, bloom_filter * source2); 

#endif
  